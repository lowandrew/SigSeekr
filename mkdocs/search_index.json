{
    "docs": [
        {
            "location": "/",
            "text": "What is SigSeekr?\n\n\nSigSeekr is a python pipeline for finding regions unique to one (or multiple) genomes when compared against an \nexclusion set of genomes. These regions can be of use as probes (either bioinformatically, or in a lab-based PCR approach)\nto quickly identify whether or not a new genome belongs with the genomes from the inclusion group used to generate the probes.\n\n\nHow does SigSeekr Work?\n\n\nSigSeekr uses a kmer-based approach for identifying regions that are unique to an inclusion group. It will create a list of all kmers that are (with size k=31)\nthat are common across all inclusion genomes specified, and then generates a list of all kmers that are found in the specified exclusion genomes. Any inclusion kmers that\nhave exact matches to exclusion kmers are then removed, leading to a list of kmers that have at least 1 nucleotide of difference from any exclusion kmer. In the event that\nno kmers unique to inclusion sequences are found the process will be repeated, but this time ignoring exclusion kmers with only one occurrence. (This cycle will continue if no\nunique kmers are found at one occurrence, going to two, then three, etc.)\n\n\nThe kmers found in the above steps will be suitable for bioinformatic purposes, but may not be sufficiently different from exclusion kmers to be used in a PCR reaction. In order \nto find PCR-appropriate kmers, and additional filtering step can be performed afterwards to only take kmers that are at least 3 SNPs different from any exclusion kmers.",
            "title": "Home"
        },
        {
            "location": "/#what-is-sigseekr",
            "text": "SigSeekr is a python pipeline for finding regions unique to one (or multiple) genomes when compared against an \nexclusion set of genomes. These regions can be of use as probes (either bioinformatically, or in a lab-based PCR approach)\nto quickly identify whether or not a new genome belongs with the genomes from the inclusion group used to generate the probes.",
            "title": "What is SigSeekr?"
        },
        {
            "location": "/#how-does-sigseekr-work",
            "text": "SigSeekr uses a kmer-based approach for identifying regions that are unique to an inclusion group. It will create a list of all kmers that are (with size k=31)\nthat are common across all inclusion genomes specified, and then generates a list of all kmers that are found in the specified exclusion genomes. Any inclusion kmers that\nhave exact matches to exclusion kmers are then removed, leading to a list of kmers that have at least 1 nucleotide of difference from any exclusion kmer. In the event that\nno kmers unique to inclusion sequences are found the process will be repeated, but this time ignoring exclusion kmers with only one occurrence. (This cycle will continue if no\nunique kmers are found at one occurrence, going to two, then three, etc.)  The kmers found in the above steps will be suitable for bioinformatic purposes, but may not be sufficiently different from exclusion kmers to be used in a PCR reaction. In order \nto find PCR-appropriate kmers, and additional filtering step can be performed afterwards to only take kmers that are at least 3 SNPs different from any exclusion kmers.",
            "title": "How does SigSeekr Work?"
        },
        {
            "location": "/installation/",
            "text": "System Requirements\n\n\nSigSeekr has been tested on Debian-based systems (in particular, Ubuntu and Mint), and should have no issue on other Linux-based distributions.\nThough not tested, SigSeekr should also work on MacOSX. Windows is not supported at this time.\n\n\nSigSeekr should be able to run on machines with as little as 8GB of RAM, provided that the \n--low_memory\n flag is enabled. It is also recommended that a decent amount of disk space is free (100GB for large runs), as the temporary files created in the kmer counting steps in the pipeline can use quite a bit of disk space.\n\n\nAny number of threads is usable with SigSeekr, with more generally being better.\n\n\nInstalling External Dependencies\n\n\nTo run SigSeekr, you'll need to install a number of external programs the pipeline uses, and add them to your $PATH.\nThe programs SigSeekr needs installed are:\n\n\n\n\nBBTools >= 37.23\n\n\nKMC >= 3.0\n\n\nBedtools >= 2.25.0\n\n\nSamtools >= 1.6\n\n\n\n\nInstructions on how to add a program to your $PATH can be found \nhere\n.\n\n\nInstallation via Pip\n\n\nThe easiest way to get SigSeekr up and running is by installing via pip. It's recommended that you create a virtual environment first, and then install.\nTo create and activate a virtualenv (with python3) something like the following set of commands should work:\n\n\n\n\nmkdir SigSeekr\n\n\nvirtualenv -p /usr/bin/python3 SigSeekr\n\n\nsource SigSeekr/bin/activate\n\n\n\n\nMore instructions on virtualenv creation and why virtual environments are wonderful can be found \nhere\n. Once inside the virtual environment, all you should need to do is run pip install:\n\n\n\n\npip install sigseekr\n\n\n\n\nThis command should install any necessary python package dependencies in your virtual environment, and make the SigSeekr script accessible from your terminal. You should now be able to type \nsigseekr.py -h\n into your terminal and have the help menu for SigSeekr come up.\n\n\nInstallation from Source\n\n\nYou can also download SigSeekr from GitHub. Releases that are not stable may be pushed to GitHub, so be careful. \nTo clone the GitHub repository, type the following:\n\n\n\n\ngit clone https://github.com/lowandrew/SigSeekr.git\n\n\n\n\nThis should create a folder called \nSigSeekr\n in your present working directory. You'll need to install any python packages that SigSeekr needs. Within the SigSeekr folder, you should find a file called \nrequirements.txt\n. You can use pip to install all the dependencies that SigSeekr needs with \npip install -r requirements.txt\n. If you aren't within a virtual environment, you'll probably need to add a \nsudo\n before the pip install command.\n\n\nThe \nsigseekr.py\n script resides in a directory called \nsigseekr\n. You can either run SigSeekr from inside that directory, or add that directory to your $PATH to have SigSeekr accessible from anywhere.",
            "title": "Installation"
        },
        {
            "location": "/installation/#system-requirements",
            "text": "SigSeekr has been tested on Debian-based systems (in particular, Ubuntu and Mint), and should have no issue on other Linux-based distributions.\nThough not tested, SigSeekr should also work on MacOSX. Windows is not supported at this time.  SigSeekr should be able to run on machines with as little as 8GB of RAM, provided that the  --low_memory  flag is enabled. It is also recommended that a decent amount of disk space is free (100GB for large runs), as the temporary files created in the kmer counting steps in the pipeline can use quite a bit of disk space.  Any number of threads is usable with SigSeekr, with more generally being better.",
            "title": "System Requirements"
        },
        {
            "location": "/installation/#installing-external-dependencies",
            "text": "To run SigSeekr, you'll need to install a number of external programs the pipeline uses, and add them to your $PATH.\nThe programs SigSeekr needs installed are:   BBTools >= 37.23  KMC >= 3.0  Bedtools >= 2.25.0  Samtools >= 1.6   Instructions on how to add a program to your $PATH can be found  here .",
            "title": "Installing External Dependencies"
        },
        {
            "location": "/installation/#installation-via-pip",
            "text": "The easiest way to get SigSeekr up and running is by installing via pip. It's recommended that you create a virtual environment first, and then install.\nTo create and activate a virtualenv (with python3) something like the following set of commands should work:   mkdir SigSeekr  virtualenv -p /usr/bin/python3 SigSeekr  source SigSeekr/bin/activate   More instructions on virtualenv creation and why virtual environments are wonderful can be found  here . Once inside the virtual environment, all you should need to do is run pip install:   pip install sigseekr   This command should install any necessary python package dependencies in your virtual environment, and make the SigSeekr script accessible from your terminal. You should now be able to type  sigseekr.py -h  into your terminal and have the help menu for SigSeekr come up.",
            "title": "Installation via Pip"
        },
        {
            "location": "/installation/#installation-from-source",
            "text": "You can also download SigSeekr from GitHub. Releases that are not stable may be pushed to GitHub, so be careful. \nTo clone the GitHub repository, type the following:   git clone https://github.com/lowandrew/SigSeekr.git   This should create a folder called  SigSeekr  in your present working directory. You'll need to install any python packages that SigSeekr needs. Within the SigSeekr folder, you should find a file called  requirements.txt . You can use pip to install all the dependencies that SigSeekr needs with  pip install -r requirements.txt . If you aren't within a virtual environment, you'll probably need to add a  sudo  before the pip install command.  The  sigseekr.py  script resides in a directory called  sigseekr . You can either run SigSeekr from inside that directory, or add that directory to your $PATH to have SigSeekr accessible from anywhere.",
            "title": "Installation from Source"
        },
        {
            "location": "/usage/",
            "text": "Quickstart\n\n\nIf you want to run SigSeekr right away upon \ninstalling\n it, you can do so with a toy dataset.\n\n\nThis dataset is hosted on figshare - to get it, run the following command:\n\n\n\n\nwget https://ndownloader.figshare.com/files/9885379 && tar xf 9885379\n\n\n\n\nYou should now have a folder called \nexample-data\n in your present working directory. To run SigSeekr, enter the following command:\n\n\n\n\nsigseekr.py -i example-data/inclusion/ -e example-data/exclusion/ -o sigseekr_output\n \n\n\n\n\nThe directory specified with the \n-o\n flag can be anything - it's the name of a directory where the output files will be created.\nUpon entering the command, you should see output that is something like this:\n\n\n [Elapsed Time: 0.00 seconds] Creating inclusion kmer set... \n [Elapsed Time: 0.41 seconds] Creating exclusion kmer set... \n [Elapsed Time: 0.83 seconds] Subtracting exclusion kmers from inclusion kmers with cutoff 1... \n [Elapsed Time: 0.97 seconds] Found kmers unique to inclusion... \n [Elapsed Time: 0.97 seconds] Generating contiguous sequences from inclusion kmers... \n [Elapsed Time: 4.10 seconds] Removing unnecessary output files... \n [Elapsed Time: 4.10 seconds] SigSeekr run complete! \n\n\n\n\nThe \nsigseekr_output\n folder should have two files in it: \ninclusion_kmers.fasta\n, which lists all the kmers that are unique to the inclusion set, and \nsigseekr_result.fasta\n, which contains the regions that unique kmers span. In this case, \nsigseekr_result.fasta\n should have one unique region. To take a look at it, use the \ncat\n command:\n\n\n\n\ncat sigseekr_output/sigseekr_result.fasta\n\n\n\n\nThe result that should come out of this is:\n\n\n>contig1_sequence1\nAACAGGCGACAGGCAGCATCACTAGCTACTA\n\n\n\n\nDetailed Usage\n\n\nDetailed usage options can be found by typing \nsigseekr.py --help\n, which will give the following output. \nFurther details on each option can be found below.\n\n\nusage: sigseekr.py [-h] -i INCLUSION -e EXCLUSION -o OUTPUT_FOLDER\n                   [-t THREADS] [-pcr] [-k] [-p PLASMID_FILTERING] [-l]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INCLUSION, --inclusion INCLUSION\n                        Path to folder containing genome(s) you want signature\n                        sequences for. Genomes can be in FASTA or FASTQ\n                        format. FASTA-formatted files should be uncompressed,\n                        FASTQ-formatted files can be gzip-compressed or\n                        uncompressed.\n  -e EXCLUSION, --exclusion EXCLUSION\n                        Path to folder containing exclusion genome(s) - those\n                        you do not want signature sequences for. Genomes can\n                        be in FASTA or FASTQ format. FASTA-formatted files\n                        should be uncompressed, FASTQ-formatted files can be\n                        gzip-compressed or uncompressed.\n  -o OUTPUT_FOLDER, --output_folder OUTPUT_FOLDER\n                        Path to folder where you want to store output files.\n                        Folder will be created if it does not exist.\n  -t THREADS, --threads THREADS\n                        Number of threads to run analysis on. Defaults to\n                        number of cores on your machine.\n  -pcr, --pcr           Enable to filter out inclusion kmers that have close\n                        relatives in exclusion kmers.\n  -k, --keep_tmpfiles   If enabled, will not clean up a bunch of (fairly)\n                        useless files at the end of a run.\n  -p PLASMID_FILTERING, --plasmid_filtering PLASMID_FILTERING\n                        To ensure unique sequences are not plasmid-borne, a\n                        FASTA-formatted database can be provided with this\n                        argument. Any unique kmers that are in the plasmid\n                        database will be filtered out.\n  -l, --low_memory      Activate this flag to cause plasmid filtering to use\n                        substantially less RAM (and go faster), at the cost of\n                        some sensitivity.\n\n\n\n\n\nAdditional info:\n\n\n\n\n-i, --inclusion\n: Not too much to say about this - it's the folder where you'll want to place any genomes that you want signature sequences for. If you place more than one genome here, \nSigSeekr will look for kmers common to all input genomes and develop a signature sequence based on those. These genomes can be FASTA-formatted assemblies (recommended) in which case they must be \nuncompressed, or raw FASTQ reads, in which case they can be either uncompressed or gzip-compressed.\n\n\n-e, --exclusion\n: The collection of genomes you \ndo not\n want your signature sequences to match to. Same file format rules as the inclusion folder. \n\n\n-o, --output_folder\n: The folder where output files will be stored. Created if it doesn't exist. Recommended that you create a new folder for each run, as outputs will be overwritten from previous runs.\n\n\n-t, --threads\n: Number of threads to run SigSeekr with. Recommended to leave at the default setting of all cores on your machine, as most programs in the SigSeekr pipeline scale very well with additional threads.\n\n\n-pcr\n: Enable to create two additional output files. The first, \npcr_kmers.fasta\n, contains inclusion kmers that \nshould\n be at least 3 SNPs away from any exclusion kmers, making them good potential candidates for PCR primers. The second, \namplicons.csv\n, gives a list of all possible pairings of primer candidates, as well as the size of the amplicon that those two primer candidates would create.\n\n\n-k, --keep_tmpfiles\n: By default, a number of fairly boring (but sometimes quite large) files are deleted at the end of a run to save on disk space. Specifying this option will keep them around if you want to inspect them more closely. Files that will be kept around with this option specified include the KMC inclusion and exclusion, and unique to inclusion databases (\ninclusion_db\n, \nexclusion_db\n, and \nunique_to_inclusion_db\n), FASTA files of all inclusion kmers (\ninclusion_kmers.fasta\n), and a bedfile showing coverage of inclusion kmers across one of the inclusion genomes specified (\nregions_to_mask.bed\n).\n\n\n-p, --plasmid_filtering\n: If you're looking for sequences unique to a genome, you probably don't want them on mobile elements that might not be there the next time you look. To help alleviate this potential problem, you can specify the path to a FASTA-formatted database with this option. Any inclusion kmers found in the database will be excluded from further analysis. A relatively extensive plasmid database (~9000 RefSeq plasmids spanning all of Bacteria), can be downloaded with the following command: \nhttps://ndownloader.figshare.com/files/9827323 && tar xf 9827323\n.\nThis will create a folder called \ndatabases\n in your present working directory. Within the folder, \nplasmid_db.fasta\n is the plasmid database.\n\n\n-l, --low_memory\n: Using the above-mentioned plasmid database can be memory-intensive. To help alleviate that, add this flag, which will use less memory and go faster, at the cost of some sensitivity.",
            "title": "Usage"
        },
        {
            "location": "/usage/#quickstart",
            "text": "If you want to run SigSeekr right away upon  installing  it, you can do so with a toy dataset.  This dataset is hosted on figshare - to get it, run the following command:   wget https://ndownloader.figshare.com/files/9885379 && tar xf 9885379   You should now have a folder called  example-data  in your present working directory. To run SigSeekr, enter the following command:   sigseekr.py -i example-data/inclusion/ -e example-data/exclusion/ -o sigseekr_output     The directory specified with the  -o  flag can be anything - it's the name of a directory where the output files will be created.\nUpon entering the command, you should see output that is something like this:   [Elapsed Time: 0.00 seconds] Creating inclusion kmer set... \n [Elapsed Time: 0.41 seconds] Creating exclusion kmer set... \n [Elapsed Time: 0.83 seconds] Subtracting exclusion kmers from inclusion kmers with cutoff 1... \n [Elapsed Time: 0.97 seconds] Found kmers unique to inclusion... \n [Elapsed Time: 0.97 seconds] Generating contiguous sequences from inclusion kmers... \n [Elapsed Time: 4.10 seconds] Removing unnecessary output files... \n [Elapsed Time: 4.10 seconds] SigSeekr run complete!   The  sigseekr_output  folder should have two files in it:  inclusion_kmers.fasta , which lists all the kmers that are unique to the inclusion set, and  sigseekr_result.fasta , which contains the regions that unique kmers span. In this case,  sigseekr_result.fasta  should have one unique region. To take a look at it, use the  cat  command:   cat sigseekr_output/sigseekr_result.fasta   The result that should come out of this is:  >contig1_sequence1\nAACAGGCGACAGGCAGCATCACTAGCTACTA  Detailed Usage  Detailed usage options can be found by typing  sigseekr.py --help , which will give the following output. \nFurther details on each option can be found below.  usage: sigseekr.py [-h] -i INCLUSION -e EXCLUSION -o OUTPUT_FOLDER\n                   [-t THREADS] [-pcr] [-k] [-p PLASMID_FILTERING] [-l]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i INCLUSION, --inclusion INCLUSION\n                        Path to folder containing genome(s) you want signature\n                        sequences for. Genomes can be in FASTA or FASTQ\n                        format. FASTA-formatted files should be uncompressed,\n                        FASTQ-formatted files can be gzip-compressed or\n                        uncompressed.\n  -e EXCLUSION, --exclusion EXCLUSION\n                        Path to folder containing exclusion genome(s) - those\n                        you do not want signature sequences for. Genomes can\n                        be in FASTA or FASTQ format. FASTA-formatted files\n                        should be uncompressed, FASTQ-formatted files can be\n                        gzip-compressed or uncompressed.\n  -o OUTPUT_FOLDER, --output_folder OUTPUT_FOLDER\n                        Path to folder where you want to store output files.\n                        Folder will be created if it does not exist.\n  -t THREADS, --threads THREADS\n                        Number of threads to run analysis on. Defaults to\n                        number of cores on your machine.\n  -pcr, --pcr           Enable to filter out inclusion kmers that have close\n                        relatives in exclusion kmers.\n  -k, --keep_tmpfiles   If enabled, will not clean up a bunch of (fairly)\n                        useless files at the end of a run.\n  -p PLASMID_FILTERING, --plasmid_filtering PLASMID_FILTERING\n                        To ensure unique sequences are not plasmid-borne, a\n                        FASTA-formatted database can be provided with this\n                        argument. Any unique kmers that are in the plasmid\n                        database will be filtered out.\n  -l, --low_memory      Activate this flag to cause plasmid filtering to use\n                        substantially less RAM (and go faster), at the cost of\n                        some sensitivity.  Additional info:   -i, --inclusion : Not too much to say about this - it's the folder where you'll want to place any genomes that you want signature sequences for. If you place more than one genome here, \nSigSeekr will look for kmers common to all input genomes and develop a signature sequence based on those. These genomes can be FASTA-formatted assemblies (recommended) in which case they must be \nuncompressed, or raw FASTQ reads, in which case they can be either uncompressed or gzip-compressed.  -e, --exclusion : The collection of genomes you  do not  want your signature sequences to match to. Same file format rules as the inclusion folder.   -o, --output_folder : The folder where output files will be stored. Created if it doesn't exist. Recommended that you create a new folder for each run, as outputs will be overwritten from previous runs.  -t, --threads : Number of threads to run SigSeekr with. Recommended to leave at the default setting of all cores on your machine, as most programs in the SigSeekr pipeline scale very well with additional threads.  -pcr : Enable to create two additional output files. The first,  pcr_kmers.fasta , contains inclusion kmers that  should  be at least 3 SNPs away from any exclusion kmers, making them good potential candidates for PCR primers. The second,  amplicons.csv , gives a list of all possible pairings of primer candidates, as well as the size of the amplicon that those two primer candidates would create.  -k, --keep_tmpfiles : By default, a number of fairly boring (but sometimes quite large) files are deleted at the end of a run to save on disk space. Specifying this option will keep them around if you want to inspect them more closely. Files that will be kept around with this option specified include the KMC inclusion and exclusion, and unique to inclusion databases ( inclusion_db ,  exclusion_db , and  unique_to_inclusion_db ), FASTA files of all inclusion kmers ( inclusion_kmers.fasta ), and a bedfile showing coverage of inclusion kmers across one of the inclusion genomes specified ( regions_to_mask.bed ).  -p, --plasmid_filtering : If you're looking for sequences unique to a genome, you probably don't want them on mobile elements that might not be there the next time you look. To help alleviate this potential problem, you can specify the path to a FASTA-formatted database with this option. Any inclusion kmers found in the database will be excluded from further analysis. A relatively extensive plasmid database (~9000 RefSeq plasmids spanning all of Bacteria), can be downloaded with the following command:  https://ndownloader.figshare.com/files/9827323 && tar xf 9827323 .\nThis will create a folder called  databases  in your present working directory. Within the folder,  plasmid_db.fasta  is the plasmid database.  -l, --low_memory : Using the above-mentioned plasmid database can be memory-intensive. To help alleviate that, add this flag, which will use less memory and go faster, at the cost of some sensitivity.",
            "title": "Quickstart"
        }
    ]
}